
TimerTwo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114f  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000722  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e0  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081a  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000871  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_7>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	c6 00       	.word	0x00c6	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea ed       	ldi	r30, 0xDA	; 218
  7e:	f2 e0       	ldi	r31, 0x02	; 2
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 30       	cpi	r26, 0x00	; 0
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a7 31       	cpi	r26, 0x17	; 23
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  b6:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:



void setup() {
  // put your setup code here, to run once:
  Timer2.start();
  be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Timer2>
  c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Timer2+0x1>
  c6:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_ZN8TimerTwo5startEv>

000000ca <loop>:
}

void loop() {
  ca:	08 95       	ret

000000cc <__tcf_0>:
		*Microseconds = ((CounterValue * 1000UL) / (F_CPU / 1000UL)) << PrescaleShiftScale;
	} else {
		ReturnValue = E_NOT_OK;
	}
	return ReturnValue;
} /* read */
  cc:	08 95       	ret

000000ce <_ZN8TimerTwo11getInstanceEv>:
  ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZGVZN8TimerTwo11getInstanceEvE17SingletonInstance>
  d2:	81 11       	cpse	r24, r1
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <_ZN8TimerTwo11getInstanceEv+0x26>
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
  da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
  de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
  e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZGVZN8TimerTwo11getInstanceEvE17SingletonInstance>
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 cd 00 	call	0x19a	; 0x19a <atexit>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	08 95       	ret

000000fa <_ZN8TimerTwo5startEv>:
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	11 f0       	breq	.+4      	; 0x106 <_ZN8TimerTwo5startEv+0xc>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	b9 f4       	brne	.+46     	; 0x134 <_ZN8TimerTwo5startEv+0x3a>
 106:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 10a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	87 70       	andi	r24, 0x07	; 7
 112:	98 7f       	andi	r25, 0xF8	; 248
 114:	98 2b       	or	r25, r24
 116:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 11a:	82 81       	ldd	r24, Z+2	; 0x02
 11c:	93 81       	ldd	r25, Z+3	; 0x03
 11e:	89 2b       	or	r24, r25
 120:	29 f0       	breq	.+10     	; 0x12c <_ZN8TimerTwo5startEv+0x32>
 122:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	80 83       	st	Z, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret

00000138 <__vector_7>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER2_COMPA_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	Timer2.TimerOverflowCallback();
 15a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <Timer2>
 15e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <Timer2+0x1>
 162:	02 80       	ldd	r0, Z+2	; 0x02
 164:	f3 81       	ldd	r31, Z+3	; 0x03
 166:	e0 2d       	mov	r30, r0
 168:	09 95       	icall
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_GLOBAL__sub_I_Timer2>:


/******************************************************************************************************************************************************
 * GLOBAL DATA
 *****************************************************************************************************************************************************/
TimerTwo& Timer2 = TimerTwo::getInstance();              // pre-instantiate TimerTwo
 18c:	0e 94 67 00 	call	0xce	; 0xce <_ZN8TimerTwo11getInstanceEv>
 190:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Timer2+0x1>
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Timer2>
 198:	08 95       	ret

0000019a <atexit>:
*/

#include <Arduino.h>

//Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (*func)()) { return 0; }
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

000001a0 <initVariant>:

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 1a0:	08 95       	ret

000001a2 <main>:

int main(void)
{
	init();
 1a2:	0e 94 2a 01 	call	0x254	; 0x254 <init>

	initVariant();
 1a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1b2:	0e 94 65 00 	call	0xca	; 0xca <loop>
		if (serialEventRun) serialEventRun();
 1b6:	20 97       	sbiw	r28, 0x00	; 0
 1b8:	e1 f3       	breq	.-8      	; 0x1b2 <main+0x10>
 1ba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1be:	f9 cf       	rjmp	.-14     	; 0x1b2 <main+0x10>

000001c0 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer0_millis>
 1da:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer0_millis+0x1>
 1de:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <timer0_millis+0x2>
 1e2:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <timer0_millis+0x3>
 1e6:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <timer0_fract>
 1ea:	23 e0       	ldi	r18, 0x03	; 3
 1ec:	23 0f       	add	r18, r19
 1ee:	2d 37       	cpi	r18, 0x7D	; 125
 1f0:	20 f4       	brcc	.+8      	; 0x1fa <__vector_16+0x3a>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	a1 1d       	adc	r26, r1
 1f6:	b1 1d       	adc	r27, r1
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__vector_16+0x44>
 1fa:	26 e8       	ldi	r18, 0x86	; 134
 1fc:	23 0f       	add	r18, r19
 1fe:	02 96       	adiw	r24, 0x02	; 2
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <timer0_fract>
 208:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer0_millis>
 20c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer0_millis+0x1>
 210:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <timer0_millis+0x2>
 214:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <timer0_millis+0x3>
 218:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <timer0_overflow_count>
 21c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <timer0_overflow_count+0x1>
 220:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <timer0_overflow_count+0x2>
 224:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <timer0_overflow_count+0x3>
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	a1 1d       	adc	r26, r1
 22c:	b1 1d       	adc	r27, r1
 22e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <timer0_overflow_count>
 232:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <timer0_overflow_count+0x1>
 236:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <timer0_overflow_count+0x2>
 23a:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <timer0_overflow_count+0x3>
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 254:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 256:	84 b5       	in	r24, 0x24	; 36
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 25c:	84 b5       	in	r24, 0x24	; 36
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 262:	85 b5       	in	r24, 0x25	; 37
 264:	82 60       	ori	r24, 0x02	; 2
 266:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 26e:	ee e6       	ldi	r30, 0x6E	; 110
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 278:	e1 e8       	ldi	r30, 0x81	; 129
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 284:	80 81       	ld	r24, Z
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 28a:	e0 e8       	ldi	r30, 0x80	; 128
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 294:	e1 eb       	ldi	r30, 0xB1	; 177
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 29e:	e0 eb       	ldi	r30, 0xB0	; 176
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 2be:	80 81       	ld	r24, Z
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 2c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2c8:	08 95       	ret

000002ca <__tablejump2__>:
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	05 90       	lpm	r0, Z+
 2d0:	f4 91       	lpm	r31, Z
 2d2:	e0 2d       	mov	r30, r0
 2d4:	09 94       	ijmp

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
