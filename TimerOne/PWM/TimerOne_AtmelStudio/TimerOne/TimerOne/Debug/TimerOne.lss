
TimerOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001602  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8d  00000000  00000000  00002365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00002ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a9  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df3  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_13>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_16>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	6d 01       	movw	r12, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 30       	cpi	r26, 0x0F	; 15
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 09 02 	call	0x412	; 0x412 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  a0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <setup>:



void setup() {
  // put your setup code here, to run once:
  Timer1.init(1000);
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	48 ee       	ldi	r20, 0xE8	; 232
  ae:	53 e0       	ldi	r21, 0x03	; 3
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN8TimerOne4initElPFvvE>
  Timer1.start();
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0c 94 c9 00 	jmp	0x192	; 0x192 <_ZN8TimerOne5startEv>

000000c4 <loop>:
}

void loop() {
  c4:	08 95       	ret

000000c6 <_ZN8TimerOne9setPeriodEl>:
		*Microseconds = (((CounterValue * 1000L) << PrescaleShiftScale) / (F_CPU / 1000L));
	} else {
		ReturnValue = E_NOT_OK;
	}
	return ReturnValue;
} /* read */
  c6:	fc 01       	movw	r30, r24
  c8:	a3 e0       	ldi	r26, 0x03	; 3
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	66 1f       	adc	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	aa 95       	dec	r26
  d4:	d1 f7       	brne	.-12     	; 0xca <_ZN8TimerOne9setPeriodEl+0x4>
  d6:	41 15       	cp	r20, r1
  d8:	51 05       	cpc	r21, r1
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	68 07       	cpc	r22, r24
  de:	71 05       	cpc	r23, r1
  e0:	10 f4       	brcc	.+4      	; 0xe6 <_ZN8TimerOne9setPeriodEl+0x20>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e c0       	rjmp	.+28     	; 0x102 <_ZN8TimerOne9setPeriodEl+0x3c>
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	76 95       	lsr	r23
  ea:	67 95       	ror	r22
  ec:	57 95       	ror	r21
  ee:	47 95       	ror	r20
  f0:	3a 95       	dec	r19
  f2:	d1 f7       	brne	.-12     	; 0xe8 <_ZN8TimerOne9setPeriodEl+0x22>
  f4:	41 15       	cp	r20, r1
  f6:	51 05       	cpc	r21, r1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	68 07       	cpc	r22, r24
  fc:	71 05       	cpc	r23, r1
  fe:	20 f4       	brcc	.+8      	; 0x108 <_ZN8TimerOne9setPeriodEl+0x42>
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	81 83       	std	Z+1, r24	; 0x01
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	32 c0       	rjmp	.+100    	; 0x16c <_ZN8TimerOne9setPeriodEl+0xa6>
 108:	23 e0       	ldi	r18, 0x03	; 3
 10a:	76 95       	lsr	r23
 10c:	67 95       	ror	r22
 10e:	57 95       	ror	r21
 110:	47 95       	ror	r20
 112:	2a 95       	dec	r18
 114:	d1 f7       	brne	.-12     	; 0x10a <_ZN8TimerOne9setPeriodEl+0x44>
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	68 07       	cpc	r22, r24
 11e:	71 05       	cpc	r23, r1
 120:	10 f4       	brcc	.+4      	; 0x126 <_ZN8TimerOne9setPeriodEl+0x60>
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	ee cf       	rjmp	.-36     	; 0x102 <_ZN8TimerOne9setPeriodEl+0x3c>
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	76 95       	lsr	r23
 12a:	67 95       	ror	r22
 12c:	57 95       	ror	r21
 12e:	47 95       	ror	r20
 130:	9a 95       	dec	r25
 132:	d1 f7       	brne	.-12     	; 0x128 <_ZN8TimerOne9setPeriodEl+0x62>
 134:	41 15       	cp	r20, r1
 136:	51 05       	cpc	r21, r1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	68 07       	cpc	r22, r24
 13c:	71 05       	cpc	r23, r1
 13e:	10 f4       	brcc	.+4      	; 0x144 <_ZN8TimerOne9setPeriodEl+0x7e>
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	df cf       	rjmp	.-66     	; 0x102 <_ZN8TimerOne9setPeriodEl+0x3c>
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	76 95       	lsr	r23
 148:	67 95       	ror	r22
 14a:	57 95       	ror	r21
 14c:	47 95       	ror	r20
 14e:	8a 95       	dec	r24
 150:	d1 f7       	brne	.-12     	; 0x146 <_ZN8TimerOne9setPeriodEl+0x80>
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	81 83       	std	Z+1, r24	; 0x01
 156:	41 15       	cp	r20, r1
 158:	51 05       	cpc	r21, r1
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	68 07       	cpc	r22, r24
 15e:	71 05       	cpc	r23, r1
 160:	88 f2       	brcs	.-94     	; 0x104 <_ZN8TimerOne9setPeriodEl+0x3e>
 162:	4f ef       	ldi	r20, 0xFF	; 255
 164:	5f ef       	ldi	r21, 0xFF	; 255
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	9f b7       	in	r25, 0x3f	; 63
 16e:	f8 94       	cli
 170:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 174:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 178:	9f bf       	out	0x3f, r25	; 63
 17a:	90 81       	ld	r25, Z
 17c:	93 30       	cpi	r25, 0x03	; 3
 17e:	41 f4       	brne	.+16     	; 0x190 <_ZN8TimerOne9setPeriodEl+0xca>
 180:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 184:	21 81       	ldd	r18, Z+1	; 0x01
 186:	27 70       	andi	r18, 0x07	; 7
 188:	98 7f       	andi	r25, 0xF8	; 248
 18a:	92 2b       	or	r25, r18
 18c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 190:	08 95       	ret

00000192 <_ZN8TimerOne5startEv>:
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	11 f0       	breq	.+4      	; 0x19e <_ZN8TimerOne5startEv+0xc>
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	29 f5       	brne	.+74     	; 0x1e8 <_ZN8TimerOne5startEv+0x56>
 19e:	8f b7       	in	r24, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1aa:	8f bf       	out	0x3f, r24	; 63
 1ac:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	87 70       	andi	r24, 0x07	; 7
 1b4:	98 7f       	andi	r25, 0xF8	; 248
 1b6:	98 2b       	or	r25, r24
 1b8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	95 81       	ldd	r25, Z+5	; 0x05
 1c0:	89 2b       	or	r24, r25
 1c2:	71 f0       	breq	.+28     	; 0x1e0 <_ZN8TimerOne5startEv+0x4e>
 1c4:	2f b7       	in	r18, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d0:	2f bf       	out	0x3f, r18	; 63
 1d2:	89 2b       	or	r24, r25
 1d4:	b9 f3       	breq	.-18     	; 0x1c4 <_ZN8TimerOne5startEv+0x32>
 1d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	80 83       	st	Z, r24
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret

000001ec <_ZN8TimerOne15attachInterruptEPFvvE>:
 1ec:	61 15       	cp	r22, r1
 1ee:	71 05       	cpc	r23, r1
 1f0:	51 f0       	breq	.+20     	; 0x206 <_ZN8TimerOne15attachInterruptEPFvvE+0x1a>
 1f2:	fc 01       	movw	r30, r24
 1f4:	75 83       	std	Z+5, r23	; 0x05
 1f6:	64 83       	std	Z+4, r22	; 0x04
 1f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret

0000020a <_ZN8TimerOne4initElPFvvE>:
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	dc 01       	movw	r26, r24
 216:	ec 91       	ld	r30, X
 218:	e1 11       	cpse	r30, r1
 21a:	30 c0       	rjmp	.+96     	; 0x27c <_ZN8TimerOne4initElPFvvE+0x72>
 21c:	79 01       	movw	r14, r18
 21e:	ec 01       	movw	r28, r24
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	88 83       	st	Y, r24
 224:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 228:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 22c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 236:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 240:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 24a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 254:	cd 01       	movw	r24, r26
 256:	0e 94 63 00 	call	0xc6	; 0xc6 <_ZN8TimerOne9setPeriodEl>
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	09 f0       	breq	.+2      	; 0x262 <_ZN8TimerOne4initElPFvvE+0x58>
 260:	10 e0       	ldi	r17, 0x00	; 0
 262:	e1 14       	cp	r14, r1
 264:	f1 04       	cpc	r15, r1
 266:	39 f0       	breq	.+14     	; 0x276 <_ZN8TimerOne4initElPFvvE+0x6c>
 268:	b7 01       	movw	r22, r14
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8TimerOne15attachInterruptEPFvvE>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	09 f4       	brne	.+2      	; 0x276 <_ZN8TimerOne4initElPFvvE+0x6c>
 274:	11 e0       	ldi	r17, 0x01	; 1
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	88 83       	st	Y, r24
 27a:	01 c0       	rjmp	.+2      	; 0x27e <_ZN8TimerOne4initElPFvvE+0x74>
 27c:	11 e0       	ldi	r17, 0x01	; 1
 27e:	81 2f       	mov	r24, r17
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	08 95       	ret

0000028c <__vector_13>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER1_OVF_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	Timer1.TimerOverflowCallback();
 2ae:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_edata+0x4>
 2b2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <_edata+0x5>
 2b6:	09 95       	icall
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <_GLOBAL__sub_I_Timer1>:
 *    
 *  \return         -
 *****************************************************************************************************************************************************/
TimerOne::TimerOne()
{
	State = TIMERONE_STATE_NONE;
 2da:	e0 e0       	ldi	r30, 0x00	; 0
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	10 82       	st	Z, r1
	TimerOverflowCallback = NULL;
 2e0:	15 82       	std	Z+5, r1	; 0x05
 2e2:	14 82       	std	Z+4, r1	; 0x04
	ClockSelectBitGroup = TIMERONE_REG_CS_NO_CLOCK;
 2e4:	11 82       	std	Z+1, r1	; 0x01
 2e6:	08 95       	ret

000002e8 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 2e8:	08 95       	ret

000002ea <main>:

int main(void)
{
	init();
 2ea:	0e 94 ce 01 	call	0x39c	; 0x39c <init>

	initVariant();
 2ee:	0e 94 74 01 	call	0x2e8	; 0x2e8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 2f2:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 2fa:	0e 94 62 00 	call	0xc4	; 0xc4 <loop>
		if (serialEventRun) serialEventRun();
 2fe:	20 97       	sbiw	r28, 0x00	; 0
 300:	e1 f3       	breq	.-8      	; 0x2fa <main+0x10>
 302:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 306:	f9 cf       	rjmp	.-14     	; 0x2fa <main+0x10>

00000308 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 322:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 326:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 32a:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 32e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <timer0_fract>
 332:	23 e0       	ldi	r18, 0x03	; 3
 334:	23 0f       	add	r18, r19
 336:	2d 37       	cpi	r18, 0x7D	; 125
 338:	20 f4       	brcc	.+8      	; 0x342 <__vector_16+0x3a>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a1 1d       	adc	r26, r1
 33e:	b1 1d       	adc	r27, r1
 340:	05 c0       	rjmp	.+10     	; 0x34c <__vector_16+0x44>
 342:	26 e8       	ldi	r18, 0x86	; 134
 344:	23 0f       	add	r18, r19
 346:	02 96       	adiw	r24, 0x02	; 2
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <timer0_fract>
 350:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 354:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 358:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 35c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 360:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 364:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 368:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 36c:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	a1 1d       	adc	r26, r1
 374:	b1 1d       	adc	r27, r1
 376:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 37a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 37e:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 382:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 39c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 39e:	84 b5       	in	r24, 0x24	; 36
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3aa:	85 b5       	in	r24, 0x25	; 37
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3b0:	85 b5       	in	r24, 0x25	; 37
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3b6:	ee e6       	ldi	r30, 0x6E	; 110
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3c0:	e1 e8       	ldi	r30, 0x81	; 129
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3c6:	80 81       	ld	r24, Z
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3cc:	80 81       	ld	r24, Z
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3d2:	e0 e8       	ldi	r30, 0x80	; 128
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3dc:	e1 eb       	ldi	r30, 0xB1	; 177
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3e6:	e0 eb       	ldi	r30, 0xB0	; 176
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3f0:	ea e7       	ldi	r30, 0x7A	; 122
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 3fa:	80 81       	ld	r24, Z
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 400:	80 81       	ld	r24, Z
 402:	81 60       	ori	r24, 0x01	; 1
 404:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 406:	80 81       	ld	r24, Z
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 40c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 410:	08 95       	ret

00000412 <__tablejump2__>:
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	05 90       	lpm	r0, Z+
 418:	f4 91       	lpm	r31, Z
 41a:	e0 2d       	mov	r30, r0
 41c:	09 94       	ijmp

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
