
TimerOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  000004f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001777  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd6  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fe  00000000  00000000  000034b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f60  00000000  00000000  00003db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004d16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_13>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_16>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	9a 01       	movw	r18, r20

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 31       	cpi	r26, 0x19	; 25
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 39 02 	call	0x472	; 0x472 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  a0:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <setup>:
//End of Auto generated function prototypes by Atmel Studio




void setup() {
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  // put your setup code here, to run once:
  Timer1.init(1000);
  ac:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <Timer1>
  b0:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <Timer1+0x1>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	48 ee       	ldi	r20, 0xE8	; 232
  ba:	53 e0       	ldi	r21, 0x03	; 3
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	ce 01       	movw	r24, r28
  c2:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8TimerOne4initElPFvvE>
  Timer1.start();
  c6:	ce 01       	movw	r24, r28
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28


void setup() {
  // put your setup code here, to run once:
  Timer1.init(1000);
  Timer1.start();
  cc:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_ZN8TimerOne5startEv>

000000d0 <loop>:
}

void loop() {
  d0:	08 95       	ret

000000d2 <__tcf_0>:
		if(TCNT1_tmp < CounterValue) { ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { CounterValue = (int) (ICR1 - CounterValue) + (int) ICR1; }}
		/* transform counter value to microseconds in an efficient way */
		*Microseconds = ((CounterValue * 1000UL) / (F_CPU / 1000UL)) << PrescaleShiftScale;
	}
	return ReturnValue;
} /* read */
  d2:	08 95       	ret

000000d4 <_ZN8TimerOne11getInstanceEv>:
  d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZGVZN8TimerOne11getInstanceEvE17SingletonInstance>
  d8:	81 11       	cpse	r24, r1
  da:	0f c0       	rjmp	.+30     	; 0xfa <_ZN8TimerOne11getInstanceEv+0x26>
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>
  e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZGVZN8TimerOne11getInstanceEvE17SingletonInstance>
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 a1 01 	call	0x342	; 0x342 <atexit>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	08 95       	ret

00000100 <_ZN8TimerOne9setPeriodEm>:
 100:	fc 01       	movw	r30, r24
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	51 05       	cpc	r21, r1
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	68 07       	cpc	r22, r24
 10a:	71 05       	cpc	r23, r1
 10c:	08 f0       	brcs	.+2      	; 0x110 <_ZN8TimerOne9setPeriodEm+0x10>
 10e:	65 c0       	rjmp	.+202    	; 0x1da <_ZN8TimerOne9setPeriodEm+0xda>
 110:	a3 e0       	ldi	r26, 0x03	; 3
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	66 1f       	adc	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	aa 95       	dec	r26
 11c:	d1 f7       	brne	.-12     	; 0x112 <_ZN8TimerOne9setPeriodEm+0x12>
 11e:	41 15       	cp	r20, r1
 120:	51 05       	cpc	r21, r1
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	68 07       	cpc	r22, r24
 126:	71 05       	cpc	r23, r1
 128:	10 f4       	brcc	.+4      	; 0x12e <_ZN8TimerOne9setPeriodEm+0x2e>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e c0       	rjmp	.+28     	; 0x14a <_ZN8TimerOne9setPeriodEm+0x4a>
 12e:	33 e0       	ldi	r19, 0x03	; 3
 130:	76 95       	lsr	r23
 132:	67 95       	ror	r22
 134:	57 95       	ror	r21
 136:	47 95       	ror	r20
 138:	3a 95       	dec	r19
 13a:	d1 f7       	brne	.-12     	; 0x130 <_ZN8TimerOne9setPeriodEm+0x30>
 13c:	41 15       	cp	r20, r1
 13e:	51 05       	cpc	r21, r1
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	68 07       	cpc	r22, r24
 144:	71 05       	cpc	r23, r1
 146:	20 f4       	brcc	.+8      	; 0x150 <_ZN8TimerOne9setPeriodEm+0x50>
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	81 83       	std	Z+1, r24	; 0x01
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	32 c0       	rjmp	.+100    	; 0x1b4 <_ZN8TimerOne9setPeriodEm+0xb4>
 150:	23 e0       	ldi	r18, 0x03	; 3
 152:	76 95       	lsr	r23
 154:	67 95       	ror	r22
 156:	57 95       	ror	r21
 158:	47 95       	ror	r20
 15a:	2a 95       	dec	r18
 15c:	d1 f7       	brne	.-12     	; 0x152 <_ZN8TimerOne9setPeriodEm+0x52>
 15e:	41 15       	cp	r20, r1
 160:	51 05       	cpc	r21, r1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	68 07       	cpc	r22, r24
 166:	71 05       	cpc	r23, r1
 168:	10 f4       	brcc	.+4      	; 0x16e <_ZN8TimerOne9setPeriodEm+0x6e>
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	ee cf       	rjmp	.-36     	; 0x14a <_ZN8TimerOne9setPeriodEm+0x4a>
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	76 95       	lsr	r23
 172:	67 95       	ror	r22
 174:	57 95       	ror	r21
 176:	47 95       	ror	r20
 178:	9a 95       	dec	r25
 17a:	d1 f7       	brne	.-12     	; 0x170 <_ZN8TimerOne9setPeriodEm+0x70>
 17c:	41 15       	cp	r20, r1
 17e:	51 05       	cpc	r21, r1
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	68 07       	cpc	r22, r24
 184:	71 05       	cpc	r23, r1
 186:	10 f4       	brcc	.+4      	; 0x18c <_ZN8TimerOne9setPeriodEm+0x8c>
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	df cf       	rjmp	.-66     	; 0x14a <_ZN8TimerOne9setPeriodEm+0x4a>
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	76 95       	lsr	r23
 190:	67 95       	ror	r22
 192:	57 95       	ror	r21
 194:	47 95       	ror	r20
 196:	8a 95       	dec	r24
 198:	d1 f7       	brne	.-12     	; 0x18e <_ZN8TimerOne9setPeriodEm+0x8e>
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	81 83       	std	Z+1, r24	; 0x01
 19e:	41 15       	cp	r20, r1
 1a0:	51 05       	cpc	r21, r1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	68 07       	cpc	r22, r24
 1a6:	71 05       	cpc	r23, r1
 1a8:	89 f6       	brne	.-94     	; 0x14c <_ZN8TimerOne9setPeriodEm+0x4c>
 1aa:	4f ef       	ldi	r20, 0xFF	; 255
 1ac:	5f ef       	ldi	r21, 0xFF	; 255
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	9f b7       	in	r25, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1bc:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1c0:	9f bf       	out	0x3f, r25	; 63
 1c2:	90 81       	ld	r25, Z
 1c4:	93 30       	cpi	r25, 0x03	; 3
 1c6:	51 f4       	brne	.+20     	; 0x1dc <_ZN8TimerOne9setPeriodEm+0xdc>
 1c8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1cc:	21 81       	ldd	r18, Z+1	; 0x01
 1ce:	27 70       	andi	r18, 0x07	; 7
 1d0:	98 7f       	andi	r25, 0xF8	; 248
 1d2:	92 2b       	or	r25, r18
 1d4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d8:	08 95       	ret
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret

000001de <_ZN8TimerOne5startEv>:
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	11 f0       	breq	.+4      	; 0x1ea <_ZN8TimerOne5startEv+0xc>
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	29 f5       	brne	.+74     	; 0x234 <_ZN8TimerOne5startEv+0x56>
 1ea:	8f b7       	in	r24, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f6:	8f bf       	out	0x3f, r24	; 63
 1f8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1fc:	81 81       	ldd	r24, Z+1	; 0x01
 1fe:	87 70       	andi	r24, 0x07	; 7
 200:	98 7f       	andi	r25, 0xF8	; 248
 202:	98 2b       	or	r25, r24
 204:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 208:	84 81       	ldd	r24, Z+4	; 0x04
 20a:	95 81       	ldd	r25, Z+5	; 0x05
 20c:	89 2b       	or	r24, r25
 20e:	71 f0       	breq	.+28     	; 0x22c <_ZN8TimerOne5startEv+0x4e>
 210:	2f b7       	in	r18, 0x3f	; 63
 212:	f8 94       	cli
 214:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 218:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 21c:	2f bf       	out	0x3f, r18	; 63
 21e:	89 2b       	or	r24, r25
 220:	b9 f3       	breq	.-18     	; 0x210 <_ZN8TimerOne5startEv+0x32>
 222:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 83       	st	Z, r24
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	08 95       	ret

00000238 <_ZN8TimerOne15attachInterruptEPFvvE>:
 238:	61 15       	cp	r22, r1
 23a:	71 05       	cpc	r23, r1
 23c:	61 f0       	breq	.+24     	; 0x256 <_ZN8TimerOne15attachInterruptEPFvvE+0x1e>
 23e:	fc 01       	movw	r30, r24
 240:	75 83       	std	Z+5, r23	; 0x05
 242:	64 83       	std	Z+4, r22	; 0x04
 244:	80 81       	ld	r24, Z
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	41 f4       	brne	.+16     	; 0x25a <_ZN8TimerOne15attachInterruptEPFvvE+0x22>
 24a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 254:	02 c0       	rjmp	.+4      	; 0x25a <_ZN8TimerOne15attachInterruptEPFvvE+0x22>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret

0000025e <_ZN8TimerOne4initElPFvvE>:
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	dc 01       	movw	r26, r24
 26a:	ec 91       	ld	r30, X
 26c:	e1 11       	cpse	r30, r1
 26e:	30 c0       	rjmp	.+96     	; 0x2d0 <_ZN8TimerOne4initElPFvvE+0x72>
 270:	79 01       	movw	r14, r18
 272:	ec 01       	movw	r28, r24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	88 83       	st	Y, r24
 278:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 27c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 280:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 28a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 294:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 298:	87 7f       	andi	r24, 0xF7	; 247
 29a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a8:	cd 01       	movw	r24, r26
 2aa:	0e 94 80 00 	call	0x100	; 0x100 <_ZN8TimerOne9setPeriodEm>
 2ae:	11 e0       	ldi	r17, 0x01	; 1
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <_ZN8TimerOne4initElPFvvE+0x58>
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	e1 14       	cp	r14, r1
 2b8:	f1 04       	cpc	r15, r1
 2ba:	39 f0       	breq	.+14     	; 0x2ca <_ZN8TimerOne4initElPFvvE+0x6c>
 2bc:	b7 01       	movw	r22, r14
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8TimerOne15attachInterruptEPFvvE>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <_ZN8TimerOne4initElPFvvE+0x6c>
 2c8:	11 e0       	ldi	r17, 0x01	; 1
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	88 83       	st	Y, r24
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <_ZN8TimerOne4initElPFvvE+0x74>
 2d0:	11 e0       	ldi	r17, 0x01	; 1
 2d2:	81 2f       	mov	r24, r17
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	08 95       	ret

000002e0 <__vector_13>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER1_OVF_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	Timer1.TimerOverflowCallback();
 302:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <Timer1>
 306:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <Timer1+0x1>
 30a:	04 80       	ldd	r0, Z+4	; 0x04
 30c:	f5 81       	ldd	r31, Z+5	; 0x05
 30e:	e0 2d       	mov	r30, r0
 310:	09 95       	icall
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <_GLOBAL__sub_I_Timer1>:
#include <util/atomic.h>

/******************************************************************************************************************************************************
 * GLOBAL DATA
 *****************************************************************************************************************************************************/
TimerOne& Timer1 = TimerOne::getInstance();              // pre-instantiate TimerOne
 334:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN8TimerOne11getInstanceEv>
 338:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Timer1+0x1>
 33c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Timer1>
 340:	08 95       	ret

00000342 <atexit>:
*/

#include <Arduino.h>

//Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (*func)()) { return 0; }
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	08 95       	ret

00000348 <initVariant>:

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 348:	08 95       	ret

0000034a <main>:

int main(void)
{
	init();
 34a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <init>

	initVariant();
 34e:	0e 94 a4 01 	call	0x348	; 0x348 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 352:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 35a:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 35e:	20 97       	sbiw	r28, 0x00	; 0
 360:	e1 f3       	breq	.-8      	; 0x35a <main+0x10>
 362:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 366:	f9 cf       	rjmp	.-14     	; 0x35a <main+0x10>

00000368 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer0_millis>
 382:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer0_millis+0x1>
 386:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer0_millis+0x2>
 38a:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer0_millis+0x3>
 38e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <timer0_fract>
 392:	23 e0       	ldi	r18, 0x03	; 3
 394:	23 0f       	add	r18, r19
 396:	2d 37       	cpi	r18, 0x7D	; 125
 398:	20 f4       	brcc	.+8      	; 0x3a2 <__vector_16+0x3a>
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	a1 1d       	adc	r26, r1
 39e:	b1 1d       	adc	r27, r1
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <__vector_16+0x44>
 3a2:	26 e8       	ldi	r18, 0x86	; 134
 3a4:	23 0f       	add	r18, r19
 3a6:	02 96       	adiw	r24, 0x02	; 2
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <timer0_fract>
 3b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer0_millis>
 3b4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <timer0_millis+0x1>
 3b8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <timer0_millis+0x2>
 3bc:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <timer0_millis+0x3>
 3c0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer0_overflow_count>
 3c4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer0_overflow_count+0x1>
 3c8:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timer0_overflow_count+0x2>
 3cc:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timer0_overflow_count+0x3>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	a1 1d       	adc	r26, r1
 3d4:	b1 1d       	adc	r27, r1
 3d6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer0_overflow_count>
 3da:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <timer0_overflow_count+0x1>
 3de:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <timer0_overflow_count+0x2>
 3e2:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <timer0_overflow_count+0x3>
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3fe:	84 b5       	in	r24, 0x24	; 36
 400:	82 60       	ori	r24, 0x02	; 2
 402:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 404:	84 b5       	in	r24, 0x24	; 36
 406:	81 60       	ori	r24, 0x01	; 1
 408:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 40a:	85 b5       	in	r24, 0x25	; 37
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 410:	85 b5       	in	r24, 0x25	; 37
 412:	81 60       	ori	r24, 0x01	; 1
 414:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 416:	ee e6       	ldi	r30, 0x6E	; 110
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 420:	e1 e8       	ldi	r30, 0x81	; 129
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 426:	80 81       	ld	r24, Z
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 432:	e0 e8       	ldi	r30, 0x80	; 128
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 43c:	e1 eb       	ldi	r30, 0xB1	; 177
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	84 60       	ori	r24, 0x04	; 4
 444:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 446:	e0 eb       	ldi	r30, 0xB0	; 176
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 450:	ea e7       	ldi	r30, 0x7A	; 122
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	84 60       	ori	r24, 0x04	; 4
 458:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 45a:	80 81       	ld	r24, Z
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 460:	80 81       	ld	r24, Z
 462:	81 60       	ori	r24, 0x01	; 1
 464:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 466:	80 81       	ld	r24, Z
 468:	80 68       	ori	r24, 0x80	; 128
 46a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 46c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 470:	08 95       	ret

00000472 <__tablejump2__>:
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	05 90       	lpm	r0, Z+
 478:	f4 91       	lpm	r31, Z
 47a:	e0 2d       	mov	r30, r0
 47c:	09 94       	ijmp

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
